{"version":3,"sources":["../src/load.test.js"],"names":["t","bootstrap","cwd","actual","deepEqual","rules","foo","is","parserPreset","name","parserOpts","headerPattern","throws","extends","one","two","zero","baz","outer","init","join","child","inner"],"mappings":"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","file":"load.test.js","sourcesContent":["import path from 'path';\nimport {fix, git} from '@commitlint/test';\nimport test from 'ava';\n\nimport load from './load';\n\ntest('extends-empty should have no rules', async t => {\n\tconst cwd = await git.bootstrap('fixtures/extends-empty');\n\tconst actual = await load({}, {cwd});\n\tt.deepEqual(actual.rules, {});\n});\n\ntest('uses seed as configured', async t => {\n\tconst cwd = await git.bootstrap('fixtures/extends-empty');\n\tconst actual = await load({rules: {foo: 'bar'}}, {cwd});\n\tt.is(actual.rules.foo, 'bar');\n});\n\ntest('uses seed with parserPreset', async t => {\n\tconst cwd = await git.bootstrap('fixtures/parser-preset');\n\tconst {parserPreset: actual} = await load(\n\t\t{\n\t\t\tparserPreset: './conventional-changelog-custom'\n\t\t},\n\t\t{cwd}\n\t);\n\tt.is(actual.name, './conventional-changelog-custom');\n\tt.deepEqual(actual.parserOpts, {\n\t\theaderPattern: /^(\\w*)(?:\\((.*)\\))?-(.*)$/\n\t});\n});\n\ntest('invalid extend should throw', async t => {\n\tconst cwd = await git.bootstrap('fixtures/extends-invalid');\n\tawait t.throws(load({}, {cwd}));\n});\n\ntest('empty file should have no rules', async t => {\n\tconst cwd = await git.bootstrap('fixtures/empty-object-file');\n\tconst actual = await load({}, {cwd});\n\tt.deepEqual(actual.rules, {});\n});\n\ntest('empty file should extend nothing', async t => {\n\tconst cwd = await git.bootstrap('fixtures/empty-file');\n\tconst actual = await load({}, {cwd});\n\tt.deepEqual(actual.extends, []);\n});\n\ntest('respects cwd option', async t => {\n\tconst cwd = await git.bootstrap('fixtures/recursive-extends/first-extended');\n\tconst actual = await load({}, {cwd});\n\tt.deepEqual(actual, {\n\t\textends: ['./second-extended'],\n\t\trules: {\n\t\t\tone: 1,\n\t\t\ttwo: 2\n\t\t}\n\t});\n});\n\ntest('recursive extends', async t => {\n\tconst cwd = await git.bootstrap('fixtures/recursive-extends');\n\tconst actual = await load({}, {cwd});\n\tt.deepEqual(actual, {\n\t\textends: ['./first-extended'],\n\t\trules: {\n\t\t\tzero: 0,\n\t\t\tone: 1,\n\t\t\ttwo: 2\n\t\t}\n\t});\n});\n\ntest('recursive extends with json file', async t => {\n\tconst cwd = await git.bootstrap('fixtures/recursive-extends-json');\n\tconst actual = await load({}, {cwd});\n\n\tt.deepEqual(actual, {\n\t\textends: ['./first-extended'],\n\t\trules: {\n\t\t\tzero: 0,\n\t\t\tone: 1,\n\t\t\ttwo: 2\n\t\t}\n\t});\n});\n\ntest('recursive extends with yaml file', async t => {\n\tconst cwd = await git.bootstrap('fixtures/recursive-extends-yaml');\n\tconst actual = await load({}, {cwd});\n\n\tt.deepEqual(actual, {\n\t\textends: ['./first-extended'],\n\t\trules: {\n\t\t\tzero: 0,\n\t\t\tone: 1,\n\t\t\ttwo: 2\n\t\t}\n\t});\n});\n\ntest('recursive extends with js file', async t => {\n\tconst cwd = await git.bootstrap('fixtures/recursive-extends-js');\n\tconst actual = await load({}, {cwd});\n\n\tt.deepEqual(actual, {\n\t\textends: ['./first-extended'],\n\t\trules: {\n\t\t\tzero: 0,\n\t\t\tone: 1,\n\t\t\ttwo: 2\n\t\t}\n\t});\n});\n\ntest('recursive extends with package.json file', async t => {\n\tconst cwd = await git.bootstrap('fixtures/recursive-extends-package');\n\tconst actual = await load({}, {cwd});\n\n\tt.deepEqual(actual, {\n\t\textends: ['./first-extended'],\n\t\trules: {\n\t\t\tzero: 0,\n\t\t\tone: 1,\n\t\t\ttwo: 2\n\t\t}\n\t});\n});\n\ntest('parser preset overwrites completely instead of merging', async t => {\n\tconst cwd = await git.bootstrap('fixtures/parser-preset-override');\n\tconst actual = await load({}, {cwd});\n\tt.is(actual.parserPreset.name, './custom');\n\tt.deepEqual(actual.parserPreset.parserOpts, {\n\t\theaderPattern: /.*/\n\t});\n});\n\ntest('recursive extends with parserPreset', async t => {\n\tconst cwd = await git.bootstrap('fixtures/recursive-parser-preset');\n\tconst actual = await load({}, {cwd});\n\tt.is(actual.parserPreset.name, './conventional-changelog-custom');\n\tt.is(typeof actual.parserPreset.parserOpts, 'object');\n\tt.deepEqual(\n\t\tactual.parserPreset.parserOpts.headerPattern,\n\t\t/^(\\w*)(?:\\((.*)\\))?-(.*)$/\n\t);\n});\n\ntest('ignores unknow keys', async t => {\n\tconst cwd = await git.bootstrap('fixtures/trash-file');\n\tconst actual = await load({}, {cwd});\n\n\tt.deepEqual(actual, {\n\t\textends: [],\n\t\trules: {\n\t\t\tfoo: 'bar',\n\t\t\tbaz: 'bar'\n\t\t}\n\t});\n});\n\ntest('ignores unknow keys recursively', async t => {\n\tconst cwd = await git.bootstrap('fixtures/trash-extend');\n\tconst actual = await load({}, {cwd});\n\n\tt.deepEqual(actual, {\n\t\textends: ['./one'],\n\t\trules: {\n\t\t\tzero: 0,\n\t\t\tone: 1\n\t\t}\n\t});\n});\n\ntest('find up from given cwd', async t => {\n\tconst outer = await fix.bootstrap('fixtures/outer-scope');\n\tawait git.init(path.join(outer, 'inner-scope'));\n\tconst cwd = path.join(outer, 'inner-scope', 'child-scope');\n\n\tconst actual = await load({}, {cwd});\n\n\tt.deepEqual(actual, {\n\t\textends: [],\n\t\trules: {\n\t\t\tchild: true,\n\t\t\tinner: false,\n\t\t\touter: false\n\t\t}\n\t});\n});\n\ntest('find up config from outside current git repo', async t => {\n\tconst outer = await fix.bootstrap('fixtures/outer-scope');\n\tconst cwd = await git.init(path.join(outer, 'inner-scope'));\n\tconst actual = await load({}, {cwd});\n\n\tt.deepEqual(actual, {\n\t\textends: [],\n\t\trules: {\n\t\t\tchild: false,\n\t\t\tinner: false,\n\t\t\touter: true\n\t\t}\n\t});\n});\n"]}